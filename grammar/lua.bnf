/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.tang.intellij.devkt.lua.parser.LuaParser"

  implements="com.tang.intellij.devkt.lua.psi.LuaPsiElement"
  extends="org.jetbrains.kotlin.com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lua"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.devkt.lua.psi"
  psiImplPackage="com.tang.intellij.devkt.lua.psi.impl"
  psiImplUtilClass="com.tang.intellij.devkt.lua.psi.LuaPsiImplUtilKt"

  parserUtilClass="com.tang.intellij.devkt.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.devkt.lua.psi.LuaTypes"
  elementTypeClass="com.tang.intellij.devkt.lua.psi.LuaElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinitionKt.createType"
  tokenTypeClass="com.tang.intellij.devkt.lua.psi.LuaTokenType"
  tokenTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinitionKt.createToken"
  parserImports = "static com.intellij.lang.WhitespacesBinders.*"

  tokens = [
        /* Keywords */
        AND = "and"
        BREAK = "break"
        DO = "do"
        ELSE = "else"
        ELSEIF = "elseif"
        END = "end"
        FALSE = "false"
        FOR = "for"
        FUNCTION = "function"
        IF = "if"
        IN = "in"
        LOCAL = "local"
        NIL = "nil"
        NOT = "not"
        OR = "or"
        REPEAT = "repeat"
        RETURN = "return"
        THEN = "then"
        TRUE = "true"
        UNTIL = "until"
        WHILE = "while"
        REGION = "REGION"
        ENDREGION = "ENDREGION"

        SHEBANG = "#!"
        SHEBANG_CONTENT = "SHEBANG_CONTENT"
        ELLIPSIS = "..."
        CONCAT = ".."
        EQ = "=="
        GE = ">="
        LE = "<="
        NE = "~="
        MINUS = "-"
        PLUS = "+"
        MULT = "*"
        MOD = "%"
        DIV = "/"
        ASSIGN = "="
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LBRACK = "["
        RBRACK = "]"
        LCURLY = "{"
        RCURLY = "}"
        GETN = "#"
        COMMA = ","
        SEMI = ";"
        COLON = ":"
        DOT = "."
        EXP = "^"

        SHORT_COMMENT="SHORT_COMMENT"
        DOC_COMMENT="DOC_COMMENT"
        BLOCK_COMMENT="BLOCK_COMMENT"
        ID="regexp:[A-Za-z_][A-Za-z0-9_]*"
        NUMBER="NUMBER"
        STRING = "STRING"

        //lua 5.3
        DOUBLE_COLON = "::"
        GOTO = "goto"
        BIT_OR = "|"
        BIT_AND = "&"
        BIT_LTLT = "<<"
        BIT_RTRT = ">>"
        BIT_TILDE = "~"
        DOUBLE_DIV = "//"
  ]

  hooks("localDef|assignStat|tableField") = [leftBinder="MY_LEFT_COMMENT_BINDER" rightBinder="MY_RIGHT_COMMENT_BINDER"]
  hooks("funcDef|localFuncDef|classMethodDef") = [leftBinder="MY_LEFT_COMMENT_BINDER"]
  hooks("fieldList") = [leftBinder="GREEDY_LEFT_BINDER" rightBinder="GREEDY_RIGHT_BINDER"]
  extends(".*Expr") = expr
  extends(".*Stat") = statement
  hooks(".*Stat") = [leftBinder="MY_LEFT_COMMENT_BINDER"]
}

luaFile ::= shebang_line? stat_semi*

shebang_line ::= SHEBANG SHEBANG_CONTENT

private stat_semi ::= <<parseStatement>>
block ::= stat_semi*

fake statement ::= () {
}

private stat_impl ::=
    emptyStat |
    doStat |
    whileStat |
    repeatStat |
    ifStat |
    forAStat |
    forBStat |
    defStat |
    lastStat |
    labelStat |
    gotoStat |
    assignStat |
    exprStat {
        recoverWhile = stat_recover
    }
private stat_recover ::= !(ID
    | ',' | ';'
    | 'local' | 'do' | 'while' | 'repeat' | 'function' | 'if' | 'for' | 'return' | break
    | nil | true | false | STRING | NUMBER | '::' | 'goto'
    | unaryOp)

emptyStat ::= ';'

varList ::= varExpr (',' varExpr)* {
    extends = exprList
}
assignStat ::= varList '=' exprList {
    pin = 2
}
doStat ::= 'do' <<lazyBlock>> 'end' {
    pin = 1
}
whileStat ::= 'while' expr 'do' <<lazyBlock>> 'end' {
    pin = 1
}
repeatStat ::= 'repeat' <<lazyBlock>> 'until' expr {
    pin = 1
}
ifStat ::= 'if' expr 'then' <<lazyBlock>> ('elseif' expr 'then' <<lazyBlock>>)* ('else' <<lazyBlock>>)? 'end' {
    pin = 1
}
forAStat ::= 'for' paramNameDef '=' expr ',' expr (',' expr)? 'do' <<lazyBlock>> 'end' {
    pin = 3
}
forBStat ::= 'for' parList 'in' exprList 'do' <<lazyBlock>> 'end' {
    pin = 1
}
labelStat ::= '::' ID '::' {
    pin = 1
}
gotoStat ::= 'goto' ID {
    pin = 1
}
private defStat ::= classMethodDef | funcDef | localFuncDef | localDef
exprStat ::= expr {
}

funcDef ::= 'function' ID funcBody {
    pin = 1
}

private checkFuncPrefix ::= ID ('.' | ':') ID

left funcPrefixRef ::= '.' <<repeat checkFuncPrefix 1>> ID { extends = indexExpr elementType = indexExpr }
classMethodName ::=  nameExpr (funcPrefixRef)* (('.' ID) | (':' ID)) {
    pin = 1
}
classMethodDef ::= 'function' classMethodName funcBody {
    pin = 2
}

localFuncDef ::= 'local' 'function' ID funcBody {
    pin = 2
}
nameList ::= nameDef (',' nameDef)* {
}
localDef ::= 'local' nameList ('=' exprList)? {
    pin = 1
}

returnStat ::= return exprList? {
}
breakStat ::= break
private lastStat ::= returnStat | breakStat

exprList ::= expr (',' expr)* {
}

literalExpr ::= nil | false | true | NUMBER | STRING | "..." {
}
stringExpr ::= STRING {
    extends = literalExpr
    elementType = literalExpr
}

private varExpr ::= primaryExpr

expr ::= <<parseExpr>> {
}

parenExpr ::= '(' expr ')' {
    pin = 1
}
unaryExpr ::= unaryOp (unaryExpr | primaryExpr) {
    pin = 1
}

left binaryExpr ::= binaryOp expr {
    pin = 1
}

left indexExpr ::= '[' expr ']' | '.' ID | ':' ID {
    pin(".*") = 1
}

args ::= listArgs | singleArg {
}
singleArg ::= tableExpr | stringExpr { extends = args }
private arg_expr_list ::= (expr ',')* (expr |& ')') { pin = 1 }
listArgs ::= '(' (arg_expr_list)? ')' { extends = args pin = 1 }

left callExpr ::= args {
}

private suffixExpr ::= indexExpr | callExpr
private prefixExpr ::= parenExpr | nameExpr | tableExpr | literalExpr
// prefixExpr | callExpr | indexExpr
private primaryExpr ::= prefixExpr (suffixExpr*)

closureExpr ::= 'function' funcBody {
    pin = 2
}

funcBody ::= '(' (parList)? ')' <<lazyBlock>>? 'end' {
    pin = 1
}

private parList ::= paramNameDef (',' paramNameDef)* (',' '...')? | '...' { recoverWhile = parList_recover }
private parList_recover ::= !(')'|'in')

tableExpr ::= '{' fieldList '}' {
    pin = 1
}

private fieldList ::= (tableField (tableFieldSep tableField)* (tableFieldSep)?)?

private tableField1 ::= '[' expr ']' '=' expr { pin = 1 }
private tableField2 ::= ID '=' expr { pin = 2 }

tableField ::= tableField1 | tableField2 | expr {
    recoverWhile = tableField_recover
}

private tableField_recover ::= !(tableFieldSep | '}' | '[')

tableFieldSep ::= ',' | ';'

binaryOp ::= '+' | '-' | '*' | '/' | '^' | '%' | '..' |
    '<' | '<=' | '>' | '>=' | '==' | '~=' |
    'and' | 'or'
    // lua5.3
    | '|' | '&' | '>>' | '<<' | '~' | '//'

unaryOp ::= '-' | 'not' | '#'
    // lua5.3
    | '~'

nameDef ::= ID {
}
nameExpr ::= ID {
}
paramNameDef ::= ID {
    extends = nameDef
}