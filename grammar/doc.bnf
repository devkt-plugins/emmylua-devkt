/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.tang.intellij.devkt.lua.comment.parser.LuaDocParser"

  extends="org.jetbrains.kotlin.com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements="com.tang.intellij.devkt.lua.comment.psi.LuaDocPsiElement"

  psiClassPrefix="LuaDoc"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.devkt.lua.comment.psi"
  psiImplPackage="com.tang.intellij.devkt.lua.comment.psi.impl"
  psiImplUtilClass="com.tang.intellij.devkt.lua.comment.psi.LuaDocPsiImplUtilKt"

  parserUtilClass="com.tang.intellij.devkt.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.devkt.lua.comment.psi.LuaDocTypes"
  elementTypeClass="com.tang.intellij.devkt.lua.comment.psi.LuaDocElementType"
  elementTypeFactory="com.tang.intellij.devkt.lua.lang.LuaParserDefinitionKt.createDocType"
  tokenTypeClass="com.tang.intellij.devkt.lua.comment.psi.LuaDocTokenType"
  extends(".*ty") = 'ty'

  tokens = [
        ID="regexp:[A-Za-z0-9_]+"
        AT = '@'
        SHARP = '#'
        EQ = '='
        COMMA = ','
        EXTENDS = ':'
        OR = '|'
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LCURLY = "{"
        RCURLY = "}"
        ARR = '[]'
        FUN = 'fun'
        TAG_NAME = 'TAG_NAME'
        TAG_PARAM = 'param'
        OPTIONAL = 'optional'
        TAG_RETURN = 'return'
        PRIVATE = 'private'
        PROTECTED = 'protected'
        PUBLIC = 'public'
        TAG_PRIVATE = 'private'
        TAG_PROTECTED = 'protected'
        TAG_PUBLIC = 'public'
        TAG_CLASS = 'class'
        TAG_FIELD = 'field'
        DASHES = 'DASHES'
        STRING_BEGIN = 'STRING_BEGIN'
        STRING = 'STRING'
        TAG_TYPE = 'type'
        TAG_LANGUAGE = 'language'
        TAG_OVERLOAD = 'overload'
        TAG_MODULE = 'module'
        TAG_SEE = 'see'
        TAG_GENERIC = 'generic'
  ]
}

doc ::= (DASHES after_dash?)*

private after_dash ::= doc_item | STRING { recoverWhile=after_dash_recover }
private after_dash_recover ::= !(DASHES)
private doc_item ::= '@' (param_def
    | return_def
    | class_def
    | field_def
    | type_def
    | lan_def
    | overload_def
    | see_ref_tag
    | tag_def
    | access_modifier
    | generic_def)

ty ::= union_ty | function_ty | table_ty | generic_ty | arr_ty | general_ty | par_ty {
}

arr_ty ::= ty '[]' {
}
general_ty ::= class_name_ref {
}
par_ty ::= '(' ty ')' {
    pin = 1
}

private fieldList ::= (tableField (',' tableField)* (',')?)?

private tableField2 ::= ID ':' ty { pin = 1 }

tableField ::= tableField2 {
}

table_def ::= '{' fieldList '}' {
    pin = 1
}

table_ty ::= table_def {
}

private generic_param_list ::= (ty ',')* ty
generic_ty ::= general_ty '<' generic_param_list '>' {
    pin = 2
}

function_param ::= ID ':' ty {
    pin = 1
}
private function_param_list::= (function_param ',')* (function_param |& ')')
function_ty ::= fun '(' function_param_list ')' (':' type_list)? {
    pin = 1
}

union_ty ::= ty ('|' ty)+ {
}
access_modifier ::= PRIVATE | PUBLIC | PROTECTED | TAG_PRIVATE | TAG_PUBLIC | TAG_PROTECTED

field_def ::= TAG_FIELD access_modifier? ('<' class_name_ref '>')? ID ty comment_string? {
    pin = 1
}

//--- tag
tag_value ::= ID
tag_def ::= TAG_NAME tag_value? comment_string? { pin = 1 }

//@overload
overload_def ::= TAG_OVERLOAD function_ty { pin = 1 }

//@language json
lan_def ::= TAG_LANGUAGE ID { pin = 1 }

//@param PARAM_NAME CLASS_REF
param_name_ref ::= ID {
}
param_def ::= TAG_PARAM OPTIONAL? param_name_ref ty comment_string? {
    pin = 1
}

//--- return
type_list ::= ty(',' ty)*
return_def ::= TAG_RETURN type_list comment_string? {
    pin = 1
}

class_name_ref ::= ID {
}
class_def ::= (TAG_CLASS|TAG_MODULE) ID (EXTENDS class_name_ref)? comment_string? {
    pin = 2
}

// @type CLASS_REF
type_def ::= TAG_TYPE ty comment_string? {
    pin = 1
}

comment_string ::= STRING_BEGIN? STRING? {
    pin = 1
}

see_ref_tag ::= TAG_SEE class_name_ref (SHARP ID)? {
    pin = 1
}

generic_def ::= TAG_GENERIC ID (EXTENDS class_name_ref)? {
    pin = 1
}